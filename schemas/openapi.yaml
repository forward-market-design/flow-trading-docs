openapi: 3.1.0
info:
  title: fts-server
  description: A RESTful flow trading API server
  contact:
    name: Jason Dark
    email: jason.dark@forwardmarketdesign.com
  license:
    name: MIT
    identifier: MIT
  version: 0.1.2
paths:
  /admin/auctions/solve:
    post:
      tags:
      - admin
      summary: Solve an auction
      description: |-
        This function handles the endpoint for solving auctions. It processes the auction solve request,
        aggregates authorizations and costs by bidder, and prepares submissions for the solver. The submissions
        are then sent to the solve queue for processing.
      operationId: solve_auctions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuctionSolveRequest'
        required: true
      responses:
        '202':
          description: Auction(s) initiated
        '400':
          description: Invalid datetime range
        '500':
          description: ''
  /admin/products:
    post:
      tags:
      - admin
      summary: Define new products for the marketplace.
      description: This endpoint defines new products based on the provided data and returns the newly created ids.
      operationId: define_products
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProductData'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductId'
        '500':
          description: ''
  /v0/auths:
    get:
      tags:
      - auths
      summary: Retrieve the requested authorization, if possible
      operationId: list_auths
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DateTimeRangeResponse_AuthListItem'
        '401':
          description: ''
        '500':
          description: ''
    post:
      tags:
      - auths
      summary: Create a new portfolio with optional inline authorization.
      operationId: post_auth
      parameters:
      - name: portfolio
        in: query
        description: implementation-dependent portfolio mode
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAuthDto'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRecord'
        '400':
          description: ''
        '401':
          description: ''
        '415':
          description: ''
        '422':
          description: ''
        '500':
          description: ''
  /v0/auths/{auth_id}:
    get:
      tags:
      - auths
      summary: Retrieve the requested authorization, if possible
      operationId: get_auth
      parameters:
      - name: auth_id
        in: path
        description: Unique identifier of the authorization
        required: true
        schema:
          $ref: '#/components/schemas/AuthId'
      - name: portfolio
        in: query
        description: implementation-dependent portfolio mode
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRecord'
        '401':
          description: ''
        '403':
          description: ''
        '404':
          description: ''
        '500':
          description: ''
    put:
      tags:
      - auths
      summary: Replace the authorization with a new one
      operationId: put_auth
      parameters:
      - name: auth_id
        in: path
        description: Unique identifier of the authorization
        required: true
        schema:
          $ref: '#/components/schemas/AuthId'
      - name: portfolio
        in: query
        description: implementation-dependent portfolio mode
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutAuthDto'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRecord'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '404':
          description: ''
        '409':
          description: ''
        '415':
          description: ''
        '422':
          description: ''
        '500':
          description: ''
    delete:
      tags:
      - auths
      summary: '"Delete" the authorization (that is, set its data to null)'
      operationId: delete_auth
      parameters:
      - name: auth_id
        in: path
        description: Unique identifier of the authorization
        required: true
        schema:
          $ref: '#/components/schemas/AuthId'
      - name: portfolio
        in: query
        description: implementation-dependent portfolio mode
        required: false
        schema:
          type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRecord'
        '401':
          description: ''
        '403':
          description: ''
        '404':
          description: ''
        '500':
          description: ''
  /v0/auths/{auth_id}/history:
    get:
      tags:
      - auths
      - history
      summary: Query for any matching results
      operationId: get_history
      parameters:
      - name: auth_id
        in: path
        description: Unique identifier of the authorization
        required: true
        schema:
          $ref: '#/components/schemas/AuthId'
      - name: before
        in: query
        description: The upper bound (exclusive) for the datetime range
        required: false
        schema:
          type:
          - string
          - 'null'
          format: date-time
      - name: after
        in: query
        description: The lower bound (inclusive) for the datetime range
        required: false
        schema:
          type:
          - string
          - 'null'
          format: date-time
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleAuthHistoryResponse'
        '401':
          description: ''
        '403':
          description: ''
        '404':
          description: ''
        '500':
          description: ''
  /v0/auths/{auth_id}/outcomes:
    get:
      tags:
      - auths
      - outcomes
      summary: Query for any matching outcomes
      operationId: get_outcomes
      parameters:
      - name: auth_id
        in: path
        description: Unique identifier of the authorization
        required: true
        schema:
          $ref: '#/components/schemas/AuthId'
      - name: before
        in: query
        description: The upper bound (exclusive) for the datetime range
        required: false
        schema:
          type:
          - string
          - 'null'
          format: date-time
      - name: after
        in: query
        description: The lower bound (inclusive) for the datetime range
        required: false
        schema:
          type:
          - string
          - 'null'
          format: date-time
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExampleAuctionOutcomeResponse'
        '401':
          description: ''
        '403':
          description: ''
        '404':
          description: ''
        '500':
          description: ''
  /v0/costs:
    post:
      tags:
      - costs
      summary: Create a new cost
      operationId: post_cost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCostDto'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostRecord'
        '400':
          description: ''
        '401':
          description: ''
        '415':
          description: ''
        '422':
          description: ''
        '500':
          description: ''
  /v0/costs/{cost_id}:
    get:
      tags:
      - costs
      summary: Get the current record for the cost, or return 404 if there is none
      operationId: get_cost
      parameters:
      - name: cost_id
        in: path
        description: Unique identifier of the cost
        required: true
        schema:
          $ref: '#/components/schemas/CostId'
      - name: group
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/GroupDisplay'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostRecord'
        '401':
          description: ''
        '403':
          description: ''
        '404':
          description: ''
        '500':
          description: ''
    put:
      tags:
      - costs
      summary: Replace the cost with a new one
      operationId: put_cost
      parameters:
      - name: cost_id
        in: path
        description: Unique identifier of the cost
        required: true
        schema:
          $ref: '#/components/schemas/CostId'
      - name: group
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/GroupDisplay'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCostDto'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostRecord'
        '400':
          description: ''
        '401':
          description: ''
        '403':
          description: ''
        '404':
          description: ''
        '409':
          description: ''
        '415':
          description: ''
        '422':
          description: ''
        '500':
          description: ''
    delete:
      tags:
      - costs
      summary: Clear the cost
      operationId: delete_cost
      parameters:
      - name: cost_id
        in: path
        description: Unique identifier of the cost
        required: true
        schema:
          $ref: '#/components/schemas/CostId'
      - name: group
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/GroupDisplay'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostRecord'
        '401':
          description: ''
        '403':
          description: ''
        '404':
          description: ''
        '500':
          description: ''
  /v0/costs/{cost_id}/history:
    get:
      tags:
      - costs
      - history
      summary: Query for any matching results
      operationId: get_history
      parameters:
      - name: cost_id
        in: path
        description: Unique identifier of the cost
        required: true
        schema:
          $ref: '#/components/schemas/CostId'
      - name: before
        in: query
        description: The upper bound (exclusive) for the datetime range
        required: false
        schema:
          type:
          - string
          - 'null'
          format: date-time
      - name: after
        in: query
        description: The lower bound (inclusive) for the datetime range
        required: false
        schema:
          type:
          - string
          - 'null'
          format: date-time
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleCostHistoryResponse'
        '401':
          description: ''
        '403':
          description: ''
        '404':
          description: ''
        '500':
          description: ''
  /v0/products:
    get:
      tags:
      - products
      operationId: list_products
      parameters:
      - name: example_query
        in: path
        required: true
        schema:
          type:
          - string
          - 'null'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleProductQueryResponse'
        '500':
          description: ''
  /v0/products/{product_id}:
    get:
      tags:
      - products
      summary: Retrieves the product specified by the route
      operationId: get_product
      parameters:
      - name: product_id
        in: path
        description: Unique identifier of the product
        required: true
        schema:
          $ref: '#/components/schemas/ProductId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleProductRecord'
        '404':
          description: ''
        '500':
          description: ''
  /v0/products/{product_id}/outcomes:
    get:
      tags:
      - products
      - outcomes
      summary: Retrieves any outcomes associated to the product
      operationId: product_outcomes
      parameters:
      - name: product_id
        in: path
        description: Unique identifier of the product
        required: true
        schema:
          $ref: '#/components/schemas/ProductId'
      - name: before
        in: query
        description: The upper bound (exclusive) for the datetime range
        required: false
        schema:
          type:
          - string
          - 'null'
          format: date-time
      - name: after
        in: query
        description: The lower bound (inclusive) for the datetime range
        required: false
        schema:
          type:
          - string
          - 'null'
          format: date-time
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleAuctionOutcomeResponse'
        '500':
          description: ''
  /v0/submissions/{bidder_id}:
    get:
      tags:
      - submissions
      operationId: get_submission
      parameters:
      - name: bidder_id
        in: path
        description: Unique identifier of the bidder
        required: true
        schema:
          $ref: '#/components/schemas/BidderId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionRecord'
        '500':
          description: ''
    put:
      tags:
      - submissions
      operationId: put_submission
      parameters:
      - name: bidder_id
        in: path
        description: Unique identifier of the bidder
        required: true
        schema:
          $ref: '#/components/schemas/BidderId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionDto'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionRecord'
        '500':
          description: ''
    delete:
      tags:
      - submissions
      operationId: delete_submission
      parameters:
      - name: bidder_id
        in: path
        description: Unique identifier of the bidder
        required: true
        schema:
          $ref: '#/components/schemas/BidderId'
      responses:
        '200':
          description: Just returns the version timestamp
          content:
            text/plain:
              schema:
                type: string
                format: date-time
        '500':
          description: ''
components:
  schemas:
    AuctionSolveRequest:
      type: object
      description: |-
        Configuration for scheduling and running a batch auction.

        Flow trading uses batch auctions to clear markets at regular intervals.
        This structure defines the time parameters for scheduling these auctions.
      required:
      - thru
      properties:
        by:
          type:
          - string
          - 'null'
          description: |-
            Optionally divide the (from, thru) interval into smaller batches with the provided duration

            This allows for scheduling multiple consecutive sub-auctions within the given time range.
        from:
          type:
          - string
          - 'null'
          format: date-time
          description: The starting time of the batch; if omitted, defaults to the last batch's ending time
        thru:
          type: string
          format: date-time
          description: The ending time of the batch
    AuthData:
      type: object
      description: |-
        The supported constraints for an authorization.

        An AuthData defines the trading constraints for an authorization:
        - Rate constraints limit how fast a portfolio can be traded (in units per time)
        - Trade constraints limit the total accumulated trade amount over time

        The rate constraints must allow the possibility of zero trade (min_rate ≤ 0 ≤ max_rate).

        The trade constraints do not have this restriction, but instead, at time of
        specification, they *should* allow for the currently traded amount of the auth.
        If they do not, the trade constraint is implicitly expanded to include 0 at
        each auction, which may not be desired.
      properties:
        max_rate:
          type:
          - number
          - 'null'
          format: double
          description: The fastest rate at which the portfolio may buy (non-negative)
        max_trade:
          type:
          - number
          - 'null'
          format: double
          description: A maximum amount of trade to preserve (always enforced against the authorization's contemporaneous amount of trade)
        min_rate:
          type:
          - number
          - 'null'
          format: double
          description: The fastest rate at which the portfolio may sell (non-positive)
        min_trade:
          type:
          - number
          - 'null'
          format: double
          description: A minimum amount of trade to preserve (always enforced against the authorization's contemporaneous amount of trade)
    AuthHistoryRecord:
      type: object
      description: |-
        A record of the authorization's data at the time it was updated or defined

        This provides historical versioning of auth constraints, allowing the system
        to track changes to auth parameters over time.
      required:
      - version
      properties:
        data:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/AuthData'
            description: The authorization constraints, or None if the auth was deactivated
        version:
          type: string
          format: date-time
          description: The timestamp when this version was created
    AuthId:
      type: string
      format: uuid
      description: A UUID newtype
    AuthListItem:
      type: object
      required:
      - auth_id
      properties:
        auth_id:
          $ref: '#/components/schemas/AuthId'
    AuthRecord:
      type: object
      description: |-
        A full description of an authorization

        An AuthRecord combines all the information needed to define an authorization:
        - Who owns it (bidder_id)
        - What it trades (portfolio)
        - How it can be traded (data)
        - The current accumulated trade (trade)
      required:
      - bidder_id
      - auth_id
      - version
      properties:
        auth_id:
          $ref: '#/components/schemas/AuthId'
          description: A unique id for the auth
        bidder_id:
          $ref: '#/components/schemas/BidderId'
          description: The responsible bidder's id
        data:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/AuthData'
            description: The constraint data for the authorization
        portfolio:
          type:
          - object
          - 'null'
          description: The portfolio associated to the auth. Due to the expected size, this portfolio may be omitted from certain endpoints.
          additionalProperties:
            type: number
            format: double
          propertyNames:
            type: string
            format: uuid
            description: A UUID newtype
        trade:
          type:
          - number
          - 'null'
          format: double
          description: The amount of cumulative trade associated to this authorization, as-of the request time
        version:
          type: string
          format: date-time
          description: The "last-modified-or-created" time as recorded by the system
    BidderId:
      type: string
      format: uuid
      description: A UUID newtype
    CostData:
      oneOf:
      - oneOf:
        - type: array
          items:
            $ref: '#/components/schemas/Point'
          description: |-
            A representation of a piecewise-linear, weakly monotone decreasing demand curve

            Demand curves define a bidder's willingness to pay for different quantities of a good.
            In flow trading, these curves must be:
            - Piecewise-linear (defined by a sequence of points)
            - Weakly monotone decreasing (price non-increasing as rate increases)
            - Include the point rate=0 in their domain (must allow zero trade)
        description: A piecewise linear demand curve defined by points
      - oneOf:
        - type: object
          description: |-
            A representation of a flat demand curve supporting interval, half-line, and full-line trading domains

            A constant curve represents a fixed price for trades within a specified rate range.
            This can be used to express indifference to (potentially unbounded) trade rates at a specific price.

            The sign convention follows flow trading standards:
            - min_rate ≤ 0 (non-positive): maximum selling rate
            - max_rate ≥ 0 (non-negative): maximum buying rate
          properties:
            max_rate:
              type:
              - number
              - 'null'
              format: double
              description: The fastest rate at which the portfolio may buy (non-negative)
            min_rate:
              type:
              - number
              - 'null'
              format: double
              description: The fastest rate at which the portfolio may sell (non-positive)
            price:
              type:
              - number
              - 'null'
              format: double
              description: The fixed price at which trades within the rate range are valued
        description: A constant constraint enforcing a specific trade quantity at a price
      description: |-
        The utility-specification of the cost

        CostData represents either:
        - A non-increasing, piecewise-linear demand curve assigning a cost to each quantity in its domain, or
        - A simple, "flat" demand curve assining a constant cost to each quantity in its domain.

        This is the core component that defines how a bidder values different trade outcomes.
    CostHistoryRecord:
      type: object
      description: |-
        A record of the cost's data at the time it was updated or defined

        This provides historical versioning of cost data, allowing the system
        to track changes to cost definitions over time.
      required:
      - version
      properties:
        data:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/CostData'
            description: The cost data, or None if the cost was deactivated
        version:
          type: string
          format: date-time
          description: The timestamp when this version was created
    CostId:
      type: string
      format: uuid
      description: A UUID newtype
    CostRecord:
      type: object
      description: |-
        A full description of a cost

        A CostRecord combines all the information needed to define a cost:
        - Who owns it (bidder_id)
        - Which auths it applies to (group)
        - The utility function (data)
      required:
      - bidder_id
      - cost_id
      - version
      properties:
        bidder_id:
          $ref: '#/components/schemas/BidderId'
          description: The responsible bidder's id
        cost_id:
          $ref: '#/components/schemas/CostId'
          description: A unique id for the cost
        data:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/CostData'
            description: The utility for the cost
        group:
          type:
          - object
          - 'null'
          description: The group associated to the cost. Because it is not always required, some endpoints may omit its definition.
          additionalProperties:
            type: number
            format: double
          propertyNames:
            type: string
            format: uuid
            description: A UUID newtype
        version:
          type: string
          format: date-time
          description: The "last-modified-or-created" time as recorded by the system
    DateTimeRangeQuery:
      type: object
      description: |-
        A query type for dealing with datetime ranges

        This structure enables API endpoints to accept parameters for filtering results
        based on time ranges with optional upper and lower bounds.
      properties:
        after:
          type:
          - string
          - 'null'
          format: date-time
          description: The lower bound (inclusive) for the datetime range
        before:
          type:
          - string
          - 'null'
          format: date-time
          description: The upper bound (exclusive) for the datetime range
    DateTimeRangeResponse_AuthListItem:
      type: object
      description: |-
        The paginated response to a datetime query

        This structure provides a standard format for returning time-based paginated results,
        including both the results and pagination metadata for retrieving the next page.
      required:
      - results
      properties:
        more:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/DateTimeRangeQuery'
            description: |-
              Optional pagination metadata for retrieving the next page of results.
              If present, indicates there are more results available.
        results:
          type: array
          items:
            type: object
            required:
            - auth_id
            properties:
              auth_id:
                $ref: '#/components/schemas/AuthId'
          description: The collection of results matching the query
    ExampleAuctionOutcome:
      type: object
      required:
      - from
      - thru
      - outcome
      properties:
        from:
          type: string
          format: date-time
        outcome:
          $ref: '#/components/schemas/ExampleOutcome'
        thru:
          type: string
          format: date-time
    ExampleAuctionOutcomeResponse:
      type: object
      required:
      - results
      properties:
        more:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/DateTimeRangeQuery'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ExampleAuctionOutcome'
    ExampleAuthHistoryResponse:
      type: object
      required:
      - results
      properties:
        more:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/DateTimeRangeQuery'
        results:
          type: array
          items:
            $ref: '#/components/schemas/AuthHistoryRecord'
    ExampleCostHistoryResponse:
      type: object
      required:
      - results
      properties:
        more:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/DateTimeRangeQuery'
        results:
          type: array
          items:
            $ref: '#/components/schemas/CostHistoryRecord'
    ExampleOutcome:
      type: object
      required:
      - price
      - trade
      properties:
        data:
          type:
          - string
          - 'null'
          example: Additional data; Defined by domain, not necessarily a string.
        price:
          type: number
          format: double
        trade:
          type: number
          format: double
    ExampleProductQueryResponse:
      type: object
      required:
      - results
      properties:
        more:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/ProductQuery'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ExampleProductRecord'
    ExampleProductRecord:
      type: object
      required:
      - id
      - data
      properties:
        data:
          $ref: '#/components/schemas/ProductData'
        id:
          $ref: '#/components/schemas/ProductId'
    GroupDisplay:
      type: string
      description: |-
        Controls whether cost group details should be included in API responses

        Since cost groups can be large, this enum allows API endpoints to optionally
        exclude group details from responses to reduce payload size.
      enum:
      - exclude
      - include
    Point:
      type: object
      description: |-
        A representation of a point for use in defining piecewise-linear curves

        Each point consists of:
        - A rate (quantity per time unit)
        - A price (value per unit)

        Points are used to define the vertices of piecewise-linear demand curves.
      required:
      - rate
      - price
      properties:
        price:
          type: number
          format: double
          description: The price (value per unit) coordinate
        rate:
          type: number
          format: double
          description: The rate (quantity per time) coordinate
    PostAuthDto:
      type: object
      required:
      - portfolio
      - data
      properties:
        auth_id:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/AuthId'
        data:
          $ref: '#/components/schemas/AuthData'
        portfolio:
          type: object
          additionalProperties:
            type: number
            format: double
          propertyNames:
            type: string
            format: uuid
            description: A UUID newtype
    PostCostDto:
      type: object
      required:
      - group
      - data
      properties:
        cost_id:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/CostId'
        data:
          $ref: '#/components/schemas/CostData'
        group:
          type: object
          additionalProperties:
            type: number
            format: double
          propertyNames:
            type: string
            format: uuid
            description: A UUID newtype
    ProductData:
      type: object
      description: The product definition is generic, so this serves just as an example.
      required:
      - example_attribute
      properties:
        example_attribute:
          type: string
    ProductId:
      type: string
      format: uuid
      description: A UUID newtype
    ProductQuery:
      type: object
      description: As the product definition is generic, the query to retrieve these products is also generic.
      properties:
        example_query:
          type:
          - string
          - 'null'
    PutAuthDto:
      oneOf:
      - type: object
        required:
        - portfolio
        - data
        properties:
          data:
            $ref: '#/components/schemas/AuthData'
          portfolio:
            type: object
            additionalProperties:
              type: number
              format: double
            propertyNames:
              type: string
              format: uuid
              description: A UUID newtype
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/AuthData'
      - type: 'null'
        default: null
    PutCostDto:
      oneOf:
      - type: object
        required:
        - group
        - data
        properties:
          data:
            $ref: '#/components/schemas/CostData'
          group:
            type: object
            additionalProperties:
              type: number
              format: double
            propertyNames:
              type: string
              format: uuid
              description: A UUID newtype
      - type: object
        required:
        - data
        properties:
          data:
            $ref: '#/components/schemas/CostData'
      - type: 'null'
        default: null
    SubmissionAuthDto:
      oneOf:
      - type: object
        description: Create a new authorization with the specified portfolio and data
        required:
        - auth_id
        - portfolio
        - data
        properties:
          auth_id:
            $ref: '#/components/schemas/AuthId'
            description: The unique identifier for the authorization
          data:
            $ref: '#/components/schemas/AuthData'
            description: The authorization data
          portfolio:
            type: object
            description: The portfolio associated with this authorization
            additionalProperties:
              type: number
              format: double
            propertyNames:
              type: string
              format: uuid
              description: A UUID newtype
      - type: object
        description: Update an existing authorization with new data
        required:
        - auth_id
        - data
        properties:
          auth_id:
            $ref: '#/components/schemas/AuthId'
            description: The unique identifier for the authorization
          data:
            $ref: '#/components/schemas/AuthData'
            description: The authorization data
      - type: object
        description: Read an existing authorization
        required:
        - auth_id
        properties:
          auth_id:
            $ref: '#/components/schemas/AuthId'
            description: The unique identifier for the authorization
      description: |-
        For a new auth, the portfolio must be provided. To update an auth, only the data needs to be provided. To continue an existing auth as-is, only the id is required.
        Any auths not present in the submission will be stopped.
    SubmissionCostDto:
      oneOf:
      - type: object
        description: Create a new cost with the specified group and data
        required:
        - cost_id
        - group
        - data
        properties:
          cost_id:
            $ref: '#/components/schemas/CostId'
            description: The unique identifier for the cost
          data:
            $ref: '#/components/schemas/CostData'
            description: The cost data
          group:
            type: object
            description: The group associated with this cost
            additionalProperties:
              type: number
              format: double
            propertyNames:
              type: string
              format: uuid
              description: A UUID newtype
      - type: object
        description: Update an existing cost with new data
        required:
        - cost_id
        - data
        properties:
          cost_id:
            $ref: '#/components/schemas/CostId'
            description: The unique identifier for the cost
          data:
            $ref: '#/components/schemas/CostData'
            description: The cost data
      - type: object
        description: Read an existing cost
        required:
        - cost_id
        properties:
          cost_id:
            $ref: '#/components/schemas/CostId'
            description: The unique identifier for the cost
      description: |-
        For a new cost, the group must be provided. To update a cost, only the data needs to be provided. To continue an existing cost as-is, only the id is required.
        Any costs not present in the submission will be stopped.
    SubmissionDto:
      type: object
      description: The submission endpoint embeds a mini-CRUD interface, accordingly we need a type to embed the CRUD operations.
      required:
      - auths
      - costs
      properties:
        auths:
          type: array
          items:
            $ref: '#/components/schemas/SubmissionAuthDto'
          description: List of auth entries for this submission
        costs:
          type: array
          items:
            $ref: '#/components/schemas/SubmissionCostDto'
          description: List of cost entries for this submission
    SubmissionRecord:
      type: object
      description: |-
        A submission represents a bidder's complete set of active authorizations and costs
        that are considered for auction processing.

        Submissions are not first-class primitives, but intermediate objects and not persisted entities.
        They're constructed from the current state of a bidder's auths and costs when needed for an auction.
      required:
      - auths
      - costs
      - as_of
      properties:
        as_of:
          type: string
          format: date-time
          description: The system-time at which these lists were generated
        auths:
          type: array
          items:
            $ref: '#/components/schemas/AuthRecord'
          description: A list of "active" auths
        costs:
          type: array
          items:
            $ref: '#/components/schemas/CostRecord'
          description: A list of "active" costs
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- jwt: []
externalDocs:
  url: https://flowtrading.forwardmarketdesign.com
  description: 📖 Flow Trading Introduction
